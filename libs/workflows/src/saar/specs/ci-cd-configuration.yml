# CI/CD Pipeline Configuration

version: 2.0

workflows:
  main:
    jobs:
      - lint
      - security_scan
      - unit_test
      - integration_test
      - build
      - deploy_staging:
          requires:
            - lint
            - security_scan
            - unit_test
            - integration_test
            - build
          filters:
            branches:
              only: develop
      - manual_approval:
          type: approval
          requires:
            - deploy_staging
          filters:
            branches:
              only: develop
      - deploy_production:
          requires:
            - manual_approval
          filters:
            branches:
              only: develop

jobs:
  lint:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci
      - save_cache:
          key: npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Lint Code
          command: npm run lint

  security_scan:
    executor: security-executor
    steps:
      - checkout
      - run:
          name: Dependency Security Scan
          command: npm audit --audit-level=high
      - run:
          name: SAST Scan
          command: npm run security:sast
      - run:
          name: License Compliance Check
          command: npm run security:license
      - store_artifacts:
          path: security-reports/

  unit_test:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Run Unit Tests
          command: npm test -- --coverage
      - store_test_results:
          path: test-results/
      - store_artifacts:
          path: coverage/

  integration_test:
    executor: integration-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Start Test Environment
          command: docker-compose -f docker-compose.test.yml up -d
      - run:
          name: Run Integration Tests
          command: npm run test:integration
      - store_test_results:
          path: test-results/

  build:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: Build Application
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - node_modules
            - package.json
            - package-lock.json
            - Dockerfile

  deploy_staging:
    executor: deploy-executor
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build and Push Docker Image
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker build -t myapp:${CIRCLE_SHA1} .
            docker tag myapp:${CIRCLE_SHA1} myapp:staging
            docker push myapp:${CIRCLE_SHA1}
            docker push myapp:staging
      - run:
          name: Deploy to Staging
          command: |
            kubectl config use-context staging
            kubectl set image deployment/myapp myapp=myapp:${CIRCLE_SHA1}
            kubectl rollout status deployment/myapp

  deploy_production:
    executor: deploy-executor
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Tag Production Image
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker pull myapp:${CIRCLE_SHA1}
            docker tag myapp:${CIRCLE_SHA1} myapp:production
            docker push myapp:production
      - run:
          name: Deploy to Production
          command: |
            kubectl config use-context production
            kubectl set image deployment/myapp myapp=myapp:production
            kubectl rollout status deployment/myapp

executors:
  node-executor:
    docker:
      - image: cimg/node:20.10
    resource_class: medium
  
  security-executor:
    docker:
      - image: cimg/node:20.10-browsers
    resource_class: medium
  
  integration-executor:
    docker:
      - image: cimg/node:20.10
      - image: postgres:14
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
    resource_class: medium+
  
  deploy-executor:
    docker:
      - image: cimg/python:3.10
    resource_class: medium
